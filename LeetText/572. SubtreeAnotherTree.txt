== 572. Subtree of Another Tree ==

== Strategy ==

- Most likely to do recursion with binary search trees
- Check if root exist || if not then just disregard the problem & return false
- Check is root is same as sub-root

== Code ==

return isSubtree(root?.left, subRoot) <-- this is a recursion calling the same function

	  ROOT		SUBROOT

	   5	  	 
	3 {   2		      2		--> check if root is not nil
	^  4 {	  	   4 {
	      1	     	      1


	   5	  	 
	3 {   2		      2		--> compare root & sub-root 	
	^  4 {	  	   4 {		    not the same so recursion left & right
	      1	     	   ^  1


	   5	  	 
	3 {   2		      2		--> compare root & sub-root 	
	   4 {	  	   4 {		    isSame so go to function
	   ^  1	           ^  1


	   5	  	 
	3 {   2		      2		--> check node A & B are not nil 	
	   4 {	  	   4 {		    same value so recursion for isSame
	   ^  1	           ^  1		    (if values not the same then return false)


	   5	  	 
	3 {   2		      2		--> Same number return true	
	   4 {	  	   4 {		    Node A & B for "1" is both nil
	      1	              1		    
	      ^		      ^

	   5	  	 
	3 {   2		      2		--> Same number return true	
	   4 {^	  	   4 {^		    Node A & B for "2" is both nil
	      1	              1		    


	      2		      2		--> Conditions were met return true	
	   4 {	  	   4 {		    for both isSame & isSubtree
	      1	              1		    
	      		      
